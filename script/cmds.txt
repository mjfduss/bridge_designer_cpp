# Start servers for development
See scripts/start

# Precompile assets.
RAILS_ENV=production bundle exec rake assets:precompile

# Push to Heroku and start server.
git push heroku master

# Alias heroku.
alias h=heroku

# Rebuild database.
# First command drops all tables. Second builds schema.
heroku pg:reset DATABASE
heroku rake db:schema:load
heroku rake db:seed

# Install the default admin account.
heroku run rake db:seed

# Running a rails console.  (   Can use to query REDIS.)
heroku run console

# Check server.
heroku ps

# Read logs.
heroku logs

# Start a psql session on the Heroku server.
heroku pg:psql

# Add redis to the app.
heroku addons:add redistogo

# View Heroku Redis documentation.
heroku addons:docs redistogo

# View redis dashboard
heroku addons:open redistogo

# Restart all processes on the server.
heroku restart

# Configure heroku Time Zone
heroku config:add TZ=America/New_York

# Installing Postmark.  This is the full session.
heroku addons:add postmark:10k
Adding postmark:10k on bridgecontest... done, v31 (free)
Welcome to Postmark!

You no longer have to worry about delivering or parsing your application’s important emails. Postmark ensures your transactional emails get to the inbox and provides a simple process to parse incoming messages.

We have set the following environment variables on your application server:

POSTMARK_API_KEY
POSTMARK_SMTP_SERVER
POSTMARK_INBOUND_ADDRESS

To get started, run `heroku addons:open postmark` and create your first sender signature.

Need help?

* Email us 24/7: support@postmarkapp.com
* Chat is open from 9 - 5pm EST on our site.
* Twitter: @postmarkapp
* Status: http://status.postmarkapp.com

IMPORTANT: Postmark is for transactional, application based email only. We do not allow marketing or email newsletters through the service. In short, if you can send it via an email marketing service, you should.
Use `heroku addons:docs postmark:10k` to view documentation.
eugene-resslers-macbook-pro:wpbdc generessler$ heroku addons:open postmark
Opening postmark:10k for bridgecontest... done

I set up info@bridgecontest.org

# Turn on worker process
heroku ps:scale worker=1

# Set up scheduler (for stale session deletion).  This is the full session.
heroku addons:add scheduler:standard
Adding scheduler:standard on bridgecontest... done, v31 (free)
This add-on consumes dyno hours, which could impact your monthly bill. To learn more:
http://devcenter.heroku.com/addons_with_dyno_hour_usage
To manage scheduled jobs run:
heroku addons:open scheduler
Use `heroku addons:docs scheduler:standard` to view documentation.

# Provision production database. Note: Heroku web page has snapshot-based migration instructions.
heroku addons:add heroku-postgresql:basic
heroku maintenance:on
# Migrate data here if old level has some.
heroku pg:promote HEROKU_POSTGRESQL_SILVER
heroku rake db:schema:load
heroku addons:upgrade redistogo:mini
# If you migrated data, must update seed to preserve or reload standings.
heroku run rake db:seed

# Setting up log tracker.
heroku addons:add papertrail:choklad
heroku addons:open papertrail

# Add memcachier for Rails::Cache to handle cached schedule record.
heroku addons:add memcachier
# got shell vars:
#MEMCACHIER_PASSWORD:          8703cbcd01
#MEMCACHIER_SERVERS:           mc4.dev.ec2.memcachier.com:11211
#MEMCACHIER_USERNAME:          135f96

# To clear Safari copy of application.js to make Coffeescript changes visible:
bundle exec rake assets:clean
# Selection Safari | Reset... and Ok

# To load a database dump from Heroku
heroku pg:backups capture -a bridgecontest
curl -o latest.dump `heroku pgbackups:url`
pg_restore --verbose --clean --no-acl --no-owner -h localhost -U generessler -d wpbdc_development latest.dump

- - - - ANNUAL UPDATE - - - -

# Updating the BD
Get both Windows and MAC to git remote HEAD 
  Normally Windows will be current and Mac will need a pull.
  Will usually have to fiddle with Mac to get clean build.
Working in Windows:
Update bdc/lib/jogamp-all-platforms library to newest stable
Apply the scenario and cost model changes specified by the CE.
  This includes substituting new graphics in bdc/bridgedesigner/resources
Update the help
  From
    bridgedesigner/help
  Copy the new splash into help graphics.
    cp ../src/bridgedesigner/resources/splash.png default/topics/images/
  Preview changes you’ll get (where OLD_YEAR is e.g. 2016):
    perl update.pl find OLD_YEAR
  Update all those found to NEW_YEAR or OLD_YEAR+1 if NEW_YEAR isn’t given.
    perl update.pl fix OLD_YEAR [NEW_YEAR]
Change the year in bdc/bridgedesigner/nbproject/config.properties
Change the year in BridgeModel.java 
  (though you probably want to wait until after calibration)
Change the year in each sample bridge string in 
  bdc/bridgedesigner/src/resources/BridgeSample.properties
  and then verify that each sample still passes the load test.
  (though you probably want to wait until after calibration)
  (if a sample fails, fix it manually in Netbeans, File|Save as Sample, edit as a replacement in BridgeSample.properties.)
Build and test Windows Installer
  Ensure signtool succeeds in console. (Expired cert causes failure.)
[We must now move changes to Mac without pushing the secret sauce to Github.]
Do
  rm ../patch/*
  git log
  [copy last commit id]
  git commit -am ‘Annual update’
  git format-patch [paste last commit id] -o ../patch
Now copy the directory ../patch and its contents to portable media
Clear ../patch on the Mac and copy portable media to it
Do
  git apply ../patch
  Fiddle as needed until Mac builds cleanly
  Update the library bcd/lib/Quaqua if necessary/possible

# Make nice Mac installer
Run target compile-mac-bundle in Netbeans
Run target build-mac-installer in Netbeans
Use Disk Utility to create a 500 Mb blank read-write DMG with name ending in 'rw'
Open the image in Finder along with its View Options
Copy a 2-resolution TIFF of the background into the Finder
Then use this copied image to set the Finder background (in View | Icons view)
Resize the Finder to fit
Use a shell to add a leading dot to the image filename: mv /Volumes/<rw vol name>
  Copy of image should disappear from finder, but background remains.
Drag copy of App onto left plaquard and Applications alias to right.
Reset font and spacing as needed.
Unmount the rw image.
Right click the rw image and "Open with..." Disk Utility.
Convert to read-only compressed final version.
DELETE THE RW IMAGE.  If you don't do this, when you click the read-only DMG, it will mount twice! (Weird but true.)

# Updating the Judge
Change contest year in 
  bdc/bridgecontest/vendor/gems/WPBDC/lib/WPBDC.rb
  bdc/bridgecontest/vendor/gems/WPBDC/ext/WPBDC/judge.h
  (these do slightly different things, so can’t be one constant)
Create the next year of test data
  Update EG_DIR and NEW_EG_DIR in bdc/bridgecontest/vendor/gems/WPBDC/ext/WPBDC/judge.c
  Compile from bdc/bridgecontest/vendor/gems/WPBDC/ext/WPBDC:
    ./build_native_test
  Create a new example directory
    export YEAR=2017 # or whatever the new year really is
    mkdir ../../test/eg/$YEAR
  Run with
    ./judge
    Should see lots of output, one per example bridge produced.
  Use the Mac BD to create test tables
    Create new folders 
      bdc/bridgedesigner/eg/$YEAR
      bdc/bridgedesigner/eg/$YEAR/html
      bdc/bridgedesigner/eg/$YEAR/log
    Uncomment lines 150-153 in src/bridgedesigner/BDApp.java
    Run the BD in Netbeans. Test data will be created during startup.
    Recomment the lines when all done if you want. They slow development runs.
Build the new Judge GEM.
  Copy the scenario descriptor table generated by the Mac BC to the gem, e.g. from bridge designer:
    cp diff eg/$YEAR/scenario_descriptors.h ../bridgecontest/vendor/gems/WPBDC/ext/WPBDC/
  Apply any non-design scenario changes manually (e.g cost parameters).
  Reset semi-final code to the null scenario (all 0’s)
  Update the version number and date in bdc/bridgecontest/vendor/gems/WPBDC/WPBDC.gemspec
  PURGE! It’s very easy to run tests for the old gem version by mistake. So . . .
    gem uninstall WPBDC
    (select All)
  Get rid of old gem files. Then build, install and push the new one to Rubygems.org
    rm WPBDC-*.gem
    gem build WPBDC.gemspec
    gem install WPBDC-<new.version>.gem
    gem push WPBDC-<new.version>.gem
    (Pushing to a public site isn’t ideal, but an acceptable risk.)
Run the tests
  From 
    bdc/bridgecontest/vendor/gems/WPBDC
  run
    rake
  You should see (after some pedantic compiler warnings) something like:
    # Running tests:
    ....
    Finished tests in 10.356214s, 0.3862 tests/s, 49000.3393 assertions/s.
    4 tests, 507458 assertions, 0 failures, 0 errors, 0 skips
  (To test after changes, it’s unfortunately seems necessary to start with PURGE! above.)

# Update the Rails site with new gem.
All from
  bdc/bridgecontest
Make sure no servers are running
  script/servers stop
Clear the test database
  rake clear_all
Tell the site to use the new gem
  bundle update WPBDC
Start servers and sanity check
  script/servers start
  Create a bridge in the BD. Upload to local server. Verify price match.

# Push the new Rails site.
Snapshot the final database
  heroku pg:backups public-url -a bridgecontest
  Copy the enormous URL onto the clipboard
  curl -o $YEAR-final.dump [Paste enormous URL from clipboard]
  mv $YEAR-final.dump bdc/etc/dumps
Shut down team home pages with the Admin UI “We’re preparing for the $YEAR contest!”
Clear the contest db.
  heroic run rake clear_all -a bridge contest
git push heroic master
Turn on home pages
Sanity check by uploading a bridge and checking price is same in BD and home page.

# To restore from dump (only done in practice so far!): 
  Turn off home pages from the Admin UI
  Clear the contest db as above
  See Heroku docs to reload Postgres db from dump
  Restore RDIS unofficial standings from rails console:
    Team.sync_standings # assumes RDIS is cleared.
  Reenable UI


